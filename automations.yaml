- id: update_morning_commute_sensor
  alias: Update morning commute time
  trigger:
  - platform: time_pattern
    minutes: /5
  condition:
  - condition: time
    after: "06:00:00"
    before: "11:00:00"
  - condition: state
    entity_id: "binary_sensor.workday_sensor"
    state: "on"
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.work_by_car
  mode: restart

- id: arrive_home
  alias: "Arrive Home"
  trigger:
    - platform: state
      entity_id: person.dale
      to: "home"
  action:
    service: notify.mobile_app_dales_iphone_xs
    data:
      message: "Welcome home"

- id: leave_home_morning_lights_off
  alias: "Turn off lights when leave home and it's dark"
  trigger:
    - platform: state
      entity_id: person.dale
      to: "not_home"
  condition:
    - condition: time
      after: "05:00"
      before: "07:00"
  action:
    service: light.turn_off
    entity_id:
      - light.downstairs_lights
      - light.bedroom_overhead_lights
      - light.bedside_light

- id: sunset
  alias: "Turn on lounge lights at dusk"
  trigger:
    - platform: numeric_state
      entity_id: sun.sun
      attribute: elevation
      below: 5
  action:
    service: scene.turn_on
    entity_id: scene.evening

- id: sunrise
  alias: "Turn off all lights at dawn"
  trigger:
    - platform: numeric_state
      entity_id: sun.sun
      attribute: elevation
      above: 0
  action:
    service: light.turn_off
    entity_id: all

- id: loadshedding_update_home_schedule
  alias: "Update loadshedding schedule"
  trigger:
    platform: mqtt
    topic: "loadshedding/home/next"
  action:
    service: input_datetime.set_datetime
    entity_id: input_datetime.loadshedding_home_next
    data:
      datetime: "{{ trigger.payload_json.next }}"

- id: loadshedding_warning
  alias: "Loadshedding 15 min warning"
  trigger:
    platform: template
    value_template: "{{ (as_timestamp(states('sensor.date_time').replace(',', '')) - 2*60*60 + 15*60) == (state_attr('input_datetime.loadshedding_home_next', 'timestamp') | int)  }}"
  condition:
    condition: numeric_state
    entity_id: sensor.loadshedding_stage
    above: 0
  action:
    - service: notify.mobile_app_dales_iphone_xs
      data:
        message: "Loadshedding in 15 min"
    - service: tts.google_cloud_say
      entity_id: media_player.apple_tv
      data:
        message: "Alert... Loadshedding starts in 15 minutes. Time to put on the kettle."

- id: business_time
  alias: "Business Time"
  trigger:
    - platform: state
      entity_id:
        - person.dale
      to: "home"
  action:
    - service: media_player.select_source
      target:
        entity_id: media_player.spotify_dale
      data:
        source: "Living Room"
    - service: media_player.play_media
      entity_id: media_player.spotify_dale
      data:
        media_content_id: "spotify:track:39l1UORIhuHvUWfxG53tRZ"
        media_content_type: music

- id: goodnight_turns_off_tv
  alias: "Turn off Apple TV and Samsung TV when activate Goodnight scene"
  trigger:
    platform: event
    event_type: call_service
    event_data:
      service_data:
        entity_id: scene.goodnight
      domain: scene
      service: turn_on
  action:
    service: script.turn_on
    target:
      entity_id: script.tv_sleep

- id: internet_down
  alias: "Internet down"
  trigger:
    - platform: state
      entity_id: binary_sensor.google_ping
      to: "off"
  action:
    service: notify.mobile_app_dales_iphone_xs
    data:
      message: "Internet is down"

- id: internet_up
  alias: "Internet up"
  trigger:
    - platform: state
      entity_id: binary_sensor.google_ping
      to: "on"
  action:
    service: notify.mobile_app_dales_iphone_xs
    data:
      message: "Internet is up"

- id: enter_bedroom_when_dark
  alias: "Turn on bedroom light on entry after dark"
  trigger:
    - platform: state
      entity_id: sensor.dale_apple_watch_presence
      to: "bedroom"
  condition:
    - condition: numeric_state
      entity_id: sun.sun
      attribute: elevation
      below: 0
  action:
    service: light.turn_on
    entity_id: light.bedside_light

- id: enter_lounge_when_dark
  alias: "Turn on lounge lights on entry when dark"
  trigger:
    - platform: state
      entity_id: sensor.dale_apple_watch_presence
      to: "lounge"
    - platform: state
      entity_id: binary_sensor.pir_stairs_occupancy
      from: "off"
      to: "on"
  condition:
    - condition: numeric_state
      entity_id: sun.sun
      attribute: elevation
      below: 0
    - condition: state
      entity_id: light.shelf_light
      state: "off"
  action:
    service: light.turn_on
    entity_id: light.shelf_light

- id: goodnight_lounge
  alias: "Turn off lounge lights when go to bed"
  trigger:
    # Could also trigger if plug phone in to charge
    - platform: state
      entity_id: sensor.dale_apple_watch_presence
      to: "bedroom"
      for: "00:00:30"
  condition:
    - condition: time
      after: "22:00"
      before: "04:00"
    - condition: state
      entity_id: binary_sensor.pir_bedroom_occupancy
      state: "on"
  action:
    - service: scene.turn_on
      data:
        entity_id: scene.goodnight

- id: location_change_debug
  alias: Push notification when room location changes
  trigger:
    - platform: state
      entity_id: sensor.dale_apple_watch_presence
  action:
    service: notify.mobile_app_dales_iphone_xs
    data:
      message: "Room {{ states('sensor.dale_apple_watch_presence') }}"

- id: easy_wakeup_gym
  alias: Turn on bedroom lights gym alarm
  trigger:
    - platform: time
      at: "06:00:00"
  condition:
    - condition: numeric_state
      entity_id: sun.sun
      attribute: elevation
      below: 0
    - condition: time
      weekday:
        - tue
        - thu
    - condition: state
      entity_id: "binary_sensor.workday_sensor"
      state: "on"
  action:
    service: light.turn_on
    entity_id: light.bedside_light

- id: brighten_kitchen_lights
  alias: "Brighten kitchen lights when working in kitchen"
  trigger:
    - platform: state
      entity_id: binary_sensor.pir_kitchen_occupancy
      from: "off"
      to: "on"
  condition:
    - condition: numeric_state
      entity_id: sun.sun
      attribute: elevation
      below: 0
  action:
    - service: scene.create
      data:
        scene_id: kitchen_before
        snapshot_entities:
          - light.kitchen_lights
    - service: light.turn_on
      entity_id: light.kitchen_lights
      data:
        brightness: 255
        color_temp: 153

- id: restore_kitchen_lights
  alias: "Restore kitchen lights when done in kitchen"
  trigger:
    - platform: state
      entity_id: binary_sensor.pir_kitchen_occupancy
      from: "on"
      to: "off"
  condition:
    - condition: numeric_state
      entity_id: sun.sun
      attribute: elevation
      below: 0
  action:
    - service: scene.turn_on
      data:
        entity_id: scene.kitchen_before

# Fixes issue where you 1) trigger snapshot, 2) change the scene, 3) PIR timer expires 
# and resets to the old scene instead of new scene
# Need 5s delay so scene changes before snapshotting
- id: fix_kitchen_lights_saved_scene
  alias: "Snapshot new scene for kitchen lights"
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        service_data:
          entity_id: scene.relax
        domain: scene
        service: turn_on
    - platform: event
      event_type: call_service
      event_data:
        service_data:
          entity_id: scene.goodnight
        domain: scene
        service: turn_on
  action:
    - delay: 5
    - service: scene.create
      data:
        scene_id: kitchen_before
        snapshot_entities:
          - light.kitchen_lights

- id: openuv_update_index
  alias: "Update OpenUV every 30 minutes while the sun is at least 10 degrees above the horizon"
  trigger:
    platform: time_pattern
    minutes: "/30"
  condition:
    condition: numeric_state
    entity_id: sun.sun
    attribute: elevation
    above: 10
  action:
    service: openuv.update_uv_index_data

- id: openuv_update_protection_window
  alias: "Update OpenUV protection window once a day"
  trigger:
    platform: time
    at: "02:12:00"
  action:
    service: openuv.update_protection_data

# TODO Other ideas
# Alert when front door open + PIR -> watch, speakers (firgure out Security on HA)
# Alert when cat litter, washing is outside, sliding door open and it starts to rain
