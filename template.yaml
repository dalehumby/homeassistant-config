# This is the "newer" way of making sensor or binary_sensor entities

- sensor:
  - name: Greeting
    state: >
      Good {{
        'morning' if now().hour < 12
        else 'afternoon' if now().hour < 17
        else 'evening'
      }}

  - name: Indoor dewpoint
    device_class: temperature
    unit_of_measurement: "°C"
    state: >
      {% set b = 17.67 %}
      {% set c = 243.5 %}
      {% set T = states('sensor.average_temperature') | float %}
      {% set RH = states('sensor.average_humidity') | float %}
      {% set gamma = log(RH / 100) + ((b * T) / (c + T)) %}
      {{ ((c * gamma) / (b - gamma)) | round(1) }}

  - name: Balcony dewpoint
    device_class: temperature
    unit_of_measurement: "°C"
    state: >
      {% set b = 17.67 %}
      {% set c = 243.5 %}
      {% set T = states('sensor.balcony_air_temperature') | float %}
      {% set RH = states('sensor.balcony_air_humidity') | float %}
      {% set gamma = log(RH / 100) + ((b * T) / (c + T)) %}
      {{ ((c * gamma) / (b - gamma)) | round(1) }}

  - name: "Adaptive Lighting Brightness: Home"
    icon: "mdi:brightness-percent"
    unit_of_measurement: "%"
    state: "{{ state_attr('switch.adaptive_lighting_home', 'brightness_pct') | round(0) }}"

  - name: "Adaptive Lighting Color Temp: Home"
    icon: "mdi:palette"
    unit_of_measurement: "mired"
    state: "{{ state_attr('switch.adaptive_lighting_home', 'color_temp_mired') }}"

  - name: Daily playlist
    icon: mdi:spotify
    # ISO weekday is 1 (Mon) .. 7 (Sun)
    # Mon Discover weekly
    # Tue Daily mix 1
    # Wed Daily mix 2
    # Thr Daily mix 3
    # Fri Release radar
    # Sat Daily mix 5
    # Sun Daily mix 6
    state: >
      {% set playlists = {
        1: "https://open.spotify.com/playlist/37i9dQZEVXcBLCgPN4zUED",
        2: "https://open.spotify.com/playlist/37i9dQZF1E3500CBHfZVid",
        3: "https://open.spotify.com/playlist/37i9dQZF1E36xhkhhnd6OW",
        4: "https://open.spotify.com/playlist/37i9dQZF1E36PUMXDr0n6B",
        5: "https://open.spotify.com/playlist/37i9dQZEVXbc0jST94T3I3",
        6: "https://open.spotify.com/playlist/37i9dQZF1E36QhxXBTH2RE",
        7: "https://open.spotify.com/playlist/37i9dQZF1E35TbkiCN416a"
      } %}
      {{ playlists[now().isoweekday()] }}

  - name: Apple Watch rain sparkline
    state: >
      {%- set raindata = state_attr("sensor.precipitation_next_hour", "precipitation_rate") %}
      {%- for fifteenminutes in raindata | batch(3) -%}
        {%- set rainintensity = fifteenminutes | max -%}
        {{ "▁" if rainintensity == 0 else
           "▂" if rainintensity < 0.5 else
           "▃" if rainintensity < 2.0 else
           "▄" if rainintensity < 3.5 else
           "▅" if rainintensity < 5.0 else
           "▆" if rainintensity < 7.5 else
           "▇" if rainintensity < 10 else
           "█" if rainintensity < 15 else
           "▓" }}
      {%- endfor %}

  - name: Apple Watch rain sparkline icon
    state: >
      {% set icon = state_attr("sensor.precipitation_next_hour", "icon") %}
      {% set icons = {
        "mdi:weather-sunny": "☀" if is_state("sun.sun", "above_horizon") else "🌙",
        "mdi:weather-partly-cloudy": "⛅",
        "mdi:weather-cloudy": "☁",
        "mdi:weather-fog": "≡",
        "mdi:weather-rainy": "💧",
        "mdi:weather-lightning-rainy": "⚡",
        "mdi:weather-pouring": "☔",
        "mdi:weather-snowy": "❄️",
        "mdi:weather-snowy-rainy": "❄️",
        "mdi:weather-snowy-heavy": "❄️"
      } %}
      {{ icons.get(icon, "?") }}

- binary_sensor:
  - name: Air quality
    device_class: smoke
    state: "{{ states('sensor.purifier_3h_pm2_5') | float > 100 }}"

  - name: Vacation
    state: "{{ distance(closest(states.person)) > 25 }}"
    icon: "{{ 'mdi:island' if this.state == 'on' else 'mdi:home' }}"
    attributes:
      distance: "{{ distance(closest(states.person)) }}"
      person: "{{ closest(states.person).name }}"

  - name: Diningroom chair occupancy
    # Change the door sensor to occupancy sensor and invert the state (door open = unoccupied)
    device_class: occupancy
    icon: mdi:table-chair
    state: "{{ is_state('binary_sensor.diningroom_chair_contact', 'off') }}"

  - name: Bathroom shower occupancy
    device_class: moisture
    state: "{{ states('sensor.bathroom_air_humidity') | int >= states('sensor.average_humidity') | int + 10 }}"

  - name: Illuminance bright
    icon: "mdi:theme-light-dark"
    state: >
      {% set lux = states('sensor.kitchen_illuminance_average') %}
      {% if lux in ['unavailable', 'unknown', 'none'] %}
        {{ this.state }}
      {% else %}
        {% set lux = lux | int(0) %}
        {% set upper = states('input_number.illuminance_upper') | int %}
        {% set lower = states('input_number.illuminance_lower') | int %}
        {{
          'on' if lux >= upper
          else 'off' if lux < lower
          else this.state
        }}
      {% endif %}

  - name: Study show sleep button
    state: >
      {{ is_state('light.study_lights', 'on') and (state_attr('light.study_lights', 'brightness') | int(0) == 13) }}

  - name: Entrance hall occupancy
    device_class: motion
    state: >
      {{ is_state('binary_sensor.entrance_pir_occupancy', 'on') and
         is_state('binary_sensor.hall_pir_occupancy', 'on') }}

- trigger:
  - platform: template
    value_template: >
      {{ states('sensor.kitchen_illuminance_average') | float(0) >
         states('input_number.illuminance_upper') | float(0) }}
    for:
      minutes: 15
    id: 'is_bright'
  - platform: template
    value_template: >
      {{ states('sensor.kitchen_illuminance_average') | float(0) <
         states('input_number.illuminance_lower') | float(0) }}
    id: 'is_dark'
  - platform: homeassistant
    event: start
  - platform: event
    event_type: event_template_reloaded
  binary_sensor:
  - name: "Illuminance needs light"
    icon: "mdi:theme-light-dark"
    state: >
      {% if trigger.id == 'is_bright' %}
        off
      {% elif trigger.id == 'is_dark' %}
        on
      {% else %}
        {{ states('sensor.kitchen_illuminance_average') | int(-1) < states('input_number.illuminance_lower') | int }}
      {% endif %}
    availability: "{{ states('sensor.kitchen_illuminance_average') not in ['unavailable', 'unknown', 'none'] }}"
